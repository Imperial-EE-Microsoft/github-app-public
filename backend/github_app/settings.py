"""
Django settings for github_app project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import environ
import json

env = environ.Env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/overview-image-analysis?tabs=4-0
SUPPORTED_IMAGE_EXTENSIONS=(".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff", ".webp")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


env.read_env(os.path.join(BASE_DIR, ".env"), overwrite=True)

# Optionally, use the environment variable to locate the .env file
env.read_env(env.str("ENV_PATH", os.path.join(BASE_DIR, ".env")))

# Retrieve environment variables
CLIENT_ID = env("CLIENT_ID")
CLIENT_SECRET = env("CLIENT_SECRET")
SERVER_URL = env("SERVER_URL")
APP_ID = env("APP_ID")
PRIVATE_KEY_PATH = env("PRIVATE_KEY_PATH")
WEBHOOK_SECRET = env("WEBHOOK_SECRET")
ROBOT_PAT = env("ROBOT_PAT")
ROBOT_USER_ID = env("ROBOT_USER_ID")
# although not used, is needed to run the server
SECRET_KEY = env("SECRET_KEY")


# Azure Credentials for Image Generation
SUBSCRIPTION_KEY_AZURE_IMAGE = os.getenv("SUBSCRIPTION_KEY_AZURE_IMAGE")
ENDPOINT_AZURE_IMAGE = os.getenv("ENDPOINT_AZURE_IMAGE")

# OpenAI Credentials for Image Translation
ENDPOINT_IMAGE_TRANSLATION = os.getenv("ENDPOINT_IMAGE_TRANSLATION")
API_KEY_IMAGE_TRANSLATION = os.getenv("API_KEY_IMAGE_TRANSLATION")
DEPLOYMENT_NAME_IMAGE_TRANSLATION = os.getenv("DEPLOYMENT_NAME_IMAGE_TRANSLATION")
API_VERSION_IMAGE_TRANSLATION = os.getenv("API_VERSION_IMAGE_TRANSLATION")

# OpenAI Credentials for Text Translation
DEPLOYMENT_NAME_TEXT_TRANSLATION = os.getenv("DEPLOYMENT_NAME_TEXT_TRANSLATION")
ENDPOINT_TEXT_TRANSLATION = os.getenv("ENDPOINT_TEXT_TRANSLATION")
API_KEY_TEXT_TRANSLATION = os.getenv("API_KEY_TEXT_TRANSLATION")


# Font Path
FONT_PATH = os.getenv("FONT_PATH")
FONT_FOLDER_PATH = os.getenv("FONT_FOLDER_PATH")

print("SERVER_URL: ", SERVER_URL)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "https://perfect-liked-yak.ngrok-free.app",
    "perfect-liked-yak.ngrok-free.app",
    'https://better-eternal-filly.ngrok-free.app',
    'better-eternal-filly.ngrok-free.app',
    SERVER_URL,
    SERVER_URL[8:],
]

CSRF_TRUSTED_ORIGINS = [
    'https://better-eternal-filly.ngrok-free.app',
    'https://perfect-liked-yak.ngrok-free.app',
    SERVER_URL,
]



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # custom apps
    "webhook_handler",
    "github_auth",
    "translate",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "github_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [f"{BASE_DIR}/../frontend/dist",],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "github_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    f"{BASE_DIR}/../frontend/dist/",
    f"{BASE_DIR}/../frontend/dist/assets",
]
print("BASE DIR: ", BASE_DIR)


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{",},
    },
    "handlers": {
        "file": {
            "level": "INFO",  # Change this to INFO to reduce log verbosity
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "debug.log"),
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,  # Keep up to 5 backup files
        },
        "console": {
            "level": "INFO",  # Change this to INFO to reduce log verbosity
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "WARNING",  # Change root level to WARNING to catch only significant events
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",  # Adjust Django logger level
            "propagate": True,
        },
        "django.db.backends": {
            "handlers": ["console", "file"],
            "level": "WARNING",  # Change to WARNING to reduce SQL query logging
            "propagate": False,
        },
        "django.utils.autoreload": {
            "handlers": ["console", "file"],
            "level": "INFO",  # Change to INFO to reduce autoreload logs
            "propagate": False,
        },
    },
}
